buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.0.2'
    id "com.matthewprenger.cursegradle" version "1.2.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = project.proj_group
archivesBaseName = project.baseName
version = grgit.describe(longDescr: true).split('-').with { "${it[0]}.${it[1]}" }
def specV = grgit.describe(longDescr: true).split('-').with { "${it[0]}" }
System.out.println(getVersion())

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${mcp_channel}", version: "${mcp_version}-${mcp_mc_version}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                VillagerServices {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                VillagerServices {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'villagerservices', '--all', '--output', file('src/generated/resources/')

            mods {
                VillagerServices {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "villagerservices",
            "Specification-Vendor": "Cyborgmas",
            "Specification-Version": specV,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Cyborgmas",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

curseforge {
    if (project.hasProperty('cf_id') && project.hasProperty('cf_release_type') && project.hasProperty('cf_changelog') &&
            ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        apiKey = properties.getProperty("curseforgeAPIKey")
        project {
            id = project.cf_id
            changelog = file(project.cf_changelog)
            changelogType = 'markdown'
            releaseType = project.cf_release_type
            addGameVersion(project.mc_version)
            mainArtifact(jar) {

            }
        }
    }
    else {
        System.out.println("The gradle.properties file is incorrect for cursegradle")
    }
}